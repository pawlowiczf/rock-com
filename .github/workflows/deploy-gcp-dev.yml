name: Build and deploy Docker images to AWS ECR

on:
  push:
    branches:
      - release
  pull_request:
    branches:
      - release

jobs:
  build_backend:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - uses: azure/setup-kubectl@v4
        with:
          version: 'v1.32.3' # default is latest stable
        id: install

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'
          project_id: kubernetes-rockcom

      - name: Install gcloud auth
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Configure kubectl
        run: gcloud container clusters get-credentials rockcom-dev --region europe-central2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ROOT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ROOT }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get secrets from AWS Secrets Manager
        id: secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,rockcom-deployment
          parse-json-secrets: true
          name-transformation: none

      - name: Build, tag, and push backend Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: rockcom/backend-dev
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          -f ./backend/Dockerfile ./backend

          docker push -a $ECR_REGISTRY/$ECR_REPOSITORY

      - name: Deploy image to Amazon EKS
        run: |
          kubectl delete deployment rockcom-backend-dev --ignore-not-found
          kubectl apply -f eks-dev/backend-deployment-dev.yaml --force
  #          kubectl delete service rockcom-backend-service --ignore-not-found
  #          kubectl apply -f eks/backend-service.yaml --force

  build_frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'
          project_id: kubernetes-rockcom

      - name: Install gcloud auth
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Configure kubectl
        run: gcloud container clusters get-credentials rockcom-dev --region europe-central2

      - uses: azure/setup-kubectl@v4
        with:
          version: 'v1.32.3' # default is latest stable
        id: install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ROOT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ROOT }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push frontend Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: rockcom/frontend-dev
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./frontend/DockerfileProduction -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./frontend
          docker push -a $ECR_REGISTRY/$ECR_REPOSITORY

      - name: Deploy image to Amazon EKS
        run: |
          kubectl delete deployment rockcom-frontend-dev --ignore-not-found
          kubectl apply -f eks-dev/frontend-deployment-dev.yaml --force
          #          kubectl delete service rockcom-frontend-service --ignore-not-found
          #          kubectl apply -f eks-dev/frontend-service.yaml --force
          
